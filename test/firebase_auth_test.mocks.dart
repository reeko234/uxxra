// Mocks generated by Mockito 5.1.0 from annotations
// in uxxrapp/test/firebase_auth_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:firebase_auth/firebase_auth.dart' as _i4;
import 'package:firebase_auth_platform_interface/firebase_auth_platform_interface.dart'
    as _i3;
import 'package:firebase_core/firebase_core.dart' as _i2;
import 'package:firebase_dynamic_links/firebase_dynamic_links.dart' as _i7;
import 'package:firebase_dynamic_links_platform_interface/firebase_dynamic_links_platform_interface.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFirebaseApp_0 extends _i1.Fake implements _i2.FirebaseApp {}

class _FakeActionCodeInfo_1 extends _i1.Fake implements _i3.ActionCodeInfo {}

class _FakeUserCredential_2 extends _i1.Fake implements _i4.UserCredential {}

class _FakeConfirmationResult_3 extends _i1.Fake
    implements _i4.ConfirmationResult {}

class _FakeUri_4 extends _i1.Fake implements Uri {}

class _FakeShortDynamicLink_5 extends _i1.Fake implements _i5.ShortDynamicLink {
}

/// A class which mocks [FirebaseAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuth extends _i1.Mock implements _i4.FirebaseAuth {
  MockFirebaseAuth() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp_0()) as _i2.FirebaseApp);
  @override
  set app(_i2.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  set tenantId(String? tenantId) =>
      super.noSuchMethod(Invocation.setter(#tenantId, tenantId),
          returnValueForMissingStub: null);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i6.Future<void> useEmulator(String? origin) =>
      (super.noSuchMethod(Invocation.method(#useEmulator, [origin]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> useAuthEmulator(String? host, int? port) =>
      (super.noSuchMethod(Invocation.method(#useAuthEmulator, [host, port]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> applyActionCode(String? code) =>
      (super.noSuchMethod(Invocation.method(#applyActionCode, [code]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<_i3.ActionCodeInfo> checkActionCode(String? code) =>
      (super.noSuchMethod(Invocation.method(#checkActionCode, [code]),
              returnValue:
                  Future<_i3.ActionCodeInfo>.value(_FakeActionCodeInfo_1()))
          as _i6.Future<_i3.ActionCodeInfo>);
  @override
  _i6.Future<void> confirmPasswordReset({String? code, String? newPassword}) =>
      (super.noSuchMethod(
          Invocation.method(#confirmPasswordReset, [],
              {#code: code, #newPassword: newPassword}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<_i4.UserCredential> createUserWithEmailAndPassword(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(#createUserWithEmailAndPassword, [],
                  {#email: email, #password: password}),
              returnValue:
                  Future<_i4.UserCredential>.value(_FakeUserCredential_2()))
          as _i6.Future<_i4.UserCredential>);
  @override
  _i6.Future<List<String>> fetchSignInMethodsForEmail(String? email) => (super
          .noSuchMethod(Invocation.method(#fetchSignInMethodsForEmail, [email]),
              returnValue: Future<List<String>>.value(<String>[]))
      as _i6.Future<List<String>>);
  @override
  _i6.Future<_i4.UserCredential> getRedirectResult() =>
      (super.noSuchMethod(Invocation.method(#getRedirectResult, []),
              returnValue:
                  Future<_i4.UserCredential>.value(_FakeUserCredential_2()))
          as _i6.Future<_i4.UserCredential>);
  @override
  bool isSignInWithEmailLink(String? emailLink) => (super.noSuchMethod(
      Invocation.method(#isSignInWithEmailLink, [emailLink]),
      returnValue: false) as bool);
  @override
  _i6.Stream<_i4.User?> authStateChanges() =>
      (super.noSuchMethod(Invocation.method(#authStateChanges, []),
          returnValue: Stream<_i4.User?>.empty()) as _i6.Stream<_i4.User?>);
  @override
  _i6.Stream<_i4.User?> idTokenChanges() =>
      (super.noSuchMethod(Invocation.method(#idTokenChanges, []),
          returnValue: Stream<_i4.User?>.empty()) as _i6.Stream<_i4.User?>);
  @override
  _i6.Stream<_i4.User?> userChanges() =>
      (super.noSuchMethod(Invocation.method(#userChanges, []),
          returnValue: Stream<_i4.User?>.empty()) as _i6.Stream<_i4.User?>);
  @override
  _i6.Future<void> sendPasswordResetEmail(
          {String? email, _i3.ActionCodeSettings? actionCodeSettings}) =>
      (super.noSuchMethod(
          Invocation.method(#sendPasswordResetEmail, [],
              {#email: email, #actionCodeSettings: actionCodeSettings}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> sendSignInLinkToEmail(
          {String? email, _i3.ActionCodeSettings? actionCodeSettings}) =>
      (super.noSuchMethod(
          Invocation.method(#sendSignInLinkToEmail, [],
              {#email: email, #actionCodeSettings: actionCodeSettings}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> setLanguageCode(String? languageCode) =>
      (super.noSuchMethod(Invocation.method(#setLanguageCode, [languageCode]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> setSettings(
          {bool? appVerificationDisabledForTesting,
          String? userAccessGroup,
          String? phoneNumber,
          String? smsCode,
          bool? forceRecaptchaFlow}) =>
      (super.noSuchMethod(
          Invocation.method(#setSettings, [], {
            #appVerificationDisabledForTesting:
                appVerificationDisabledForTesting,
            #userAccessGroup: userAccessGroup,
            #phoneNumber: phoneNumber,
            #smsCode: smsCode,
            #forceRecaptchaFlow: forceRecaptchaFlow
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> setPersistence(_i3.Persistence? persistence) =>
      (super.noSuchMethod(Invocation.method(#setPersistence, [persistence]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<_i4.UserCredential> signInAnonymously() =>
      (super.noSuchMethod(Invocation.method(#signInAnonymously, []),
              returnValue:
                  Future<_i4.UserCredential>.value(_FakeUserCredential_2()))
          as _i6.Future<_i4.UserCredential>);
  @override
  _i6.Future<_i4.UserCredential> signInWithCredential(
          _i3.AuthCredential? credential) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithCredential, [credential]),
              returnValue:
                  Future<_i4.UserCredential>.value(_FakeUserCredential_2()))
          as _i6.Future<_i4.UserCredential>);
  @override
  _i6.Future<_i4.UserCredential> signInWithCustomToken(String? token) =>
      (super.noSuchMethod(Invocation.method(#signInWithCustomToken, [token]),
              returnValue:
                  Future<_i4.UserCredential>.value(_FakeUserCredential_2()))
          as _i6.Future<_i4.UserCredential>);
  @override
  _i6.Future<_i4.UserCredential> signInWithEmailAndPassword(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithEmailAndPassword, [],
                  {#email: email, #password: password}),
              returnValue:
                  Future<_i4.UserCredential>.value(_FakeUserCredential_2()))
          as _i6.Future<_i4.UserCredential>);
  @override
  _i6.Future<_i4.UserCredential> signInWithEmailLink(
          {String? email, String? emailLink}) =>
      (super.noSuchMethod(
          Invocation.method(
              #signInWithEmailLink, [], {#email: email, #emailLink: emailLink}),
          returnValue:
              Future<_i4.UserCredential>.value(_FakeUserCredential_2())) as _i6
          .Future<_i4.UserCredential>);
  @override
  _i6.Future<_i4.ConfirmationResult> signInWithPhoneNumber(String? phoneNumber,
          [_i4.RecaptchaVerifier? verifier]) =>
      (super.noSuchMethod(
          Invocation.method(#signInWithPhoneNumber, [phoneNumber, verifier]),
          returnValue: Future<_i4.ConfirmationResult>.value(
              _FakeConfirmationResult_3())) as _i6
          .Future<_i4.ConfirmationResult>);
  @override
  _i6.Future<_i4.UserCredential> signInWithPopup(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(Invocation.method(#signInWithPopup, [provider]),
              returnValue:
                  Future<_i4.UserCredential>.value(_FakeUserCredential_2()))
          as _i6.Future<_i4.UserCredential>);
  @override
  _i6.Future<void> signInWithRedirect(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(Invocation.method(#signInWithRedirect, [provider]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<String> verifyPasswordResetCode(String? code) =>
      (super.noSuchMethod(Invocation.method(#verifyPasswordResetCode, [code]),
          returnValue: Future<String>.value('')) as _i6.Future<String>);
  @override
  _i6.Future<void> verifyPhoneNumber(
          {String? phoneNumber,
          _i3.PhoneVerificationCompleted? verificationCompleted,
          _i3.PhoneVerificationFailed? verificationFailed,
          _i3.PhoneCodeSent? codeSent,
          _i3.PhoneCodeAutoRetrievalTimeout? codeAutoRetrievalTimeout,
          String? autoRetrievedSmsCodeForTesting,
          Duration? timeout = const Duration(seconds: 30),
          int? forceResendingToken}) =>
      (super.noSuchMethod(
          Invocation.method(#verifyPhoneNumber, [], {
            #phoneNumber: phoneNumber,
            #verificationCompleted: verificationCompleted,
            #verificationFailed: verificationFailed,
            #codeSent: codeSent,
            #codeAutoRetrievalTimeout: codeAutoRetrievalTimeout,
            #autoRetrievedSmsCodeForTesting: autoRetrievedSmsCodeForTesting,
            #timeout: timeout,
            #forceResendingToken: forceResendingToken
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
}

/// A class which mocks [FirebaseDynamicLinks].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseDynamicLinks extends _i1.Mock
    implements _i7.FirebaseDynamicLinks {
  MockFirebaseDynamicLinks() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp_0()) as _i2.FirebaseApp);
  @override
  set app(_i2.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  _i6.Stream<_i5.PendingDynamicLinkData> get onLink =>
      (super.noSuchMethod(Invocation.getter(#onLink),
              returnValue: Stream<_i5.PendingDynamicLinkData>.empty())
          as _i6.Stream<_i5.PendingDynamicLinkData>);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i6.Future<_i5.PendingDynamicLinkData?> getInitialLink() =>
      (super.noSuchMethod(Invocation.method(#getInitialLink, []),
              returnValue: Future<_i5.PendingDynamicLinkData?>.value())
          as _i6.Future<_i5.PendingDynamicLinkData?>);
  @override
  _i6.Future<_i5.PendingDynamicLinkData?> getDynamicLink(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#getDynamicLink, [url]),
              returnValue: Future<_i5.PendingDynamicLinkData?>.value())
          as _i6.Future<_i5.PendingDynamicLinkData?>);
  @override
  _i6.Future<Uri> buildLink(_i5.DynamicLinkParameters? parameters) =>
      (super.noSuchMethod(Invocation.method(#buildLink, [parameters]),
          returnValue: Future<Uri>.value(_FakeUri_4())) as _i6.Future<Uri>);
  @override
  _i6.Future<_i5.ShortDynamicLink> buildShortLink(
          _i5.DynamicLinkParameters? parameters,
          {_i5.ShortDynamicLinkType? shortLinkType =
              _i5.ShortDynamicLinkType.short}) =>
      (super.noSuchMethod(
          Invocation.method(
              #buildShortLink, [parameters], {#shortLinkType: shortLinkType}),
          returnValue: Future<_i5.ShortDynamicLink>.value(
              _FakeShortDynamicLink_5())) as _i6.Future<_i5.ShortDynamicLink>);
}

/// A class which mocks [PendingDynamicLinkData].
///
/// See the documentation for Mockito's code generation for more information.
class MockPendingDynamicLinkData extends _i1.Mock
    implements _i5.PendingDynamicLinkData {
  MockPendingDynamicLinkData() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Uri get link =>
      (super.noSuchMethod(Invocation.getter(#link), returnValue: _FakeUri_4())
          as Uri);
  @override
  Map<String, String> get utmParameters =>
      (super.noSuchMethod(Invocation.getter(#utmParameters),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  Map<String, dynamic> asMap() =>
      (super.noSuchMethod(Invocation.method(#asMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}

/// A class which mocks [ConfirmationResult].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfirmationResult extends _i1.Mock
    implements _i4.ConfirmationResult {
  MockConfirmationResult() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get verificationId =>
      (super.noSuchMethod(Invocation.getter(#verificationId), returnValue: '')
          as String);
  @override
  _i6.Future<_i4.UserCredential> confirm(String? verificationCode) =>
      (super.noSuchMethod(Invocation.method(#confirm, [verificationCode]),
              returnValue:
                  Future<_i4.UserCredential>.value(_FakeUserCredential_2()))
          as _i6.Future<_i4.UserCredential>);
}

/// A class which mocks [UserCredential].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserCredential extends _i1.Mock implements _i4.UserCredential {
  MockUserCredential() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [AuthCredential].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthCredential extends _i1.Mock implements _i3.AuthCredential {
  MockAuthCredential() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get providerId =>
      (super.noSuchMethod(Invocation.getter(#providerId), returnValue: '')
          as String);
  @override
  String get signInMethod =>
      (super.noSuchMethod(Invocation.getter(#signInMethod), returnValue: '')
          as String);
  @override
  Map<String, dynamic> asMap() =>
      (super.noSuchMethod(Invocation.method(#asMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}
